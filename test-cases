Test cases for Password Hashing Application


<Password Hashing Application Execution>
Precondition: User has downloaded the Password Hashing application and unpacked successfully
Operating system: MacOS

TC: Setting a valid PORT(8088) variable for application initialization
Given the Hashing Application is being initialized and a PORT environment variable defined
When the port is set to 8088
Then the application should launch and wait for http connections

TC: Setting an invalid PORT variable for application initialization
Given the Hashing Application is being initialized and a PORT environment variable defined
When the port is set to 7077
Then the application should fail to launch


<Password Hashing Application Specifications>
Precondition: The application has launched successfully
Operating system: MacOS

POST to /hash endpoint
Requirements:
1. A POST to /hash should accept a password
2. It should return a job identifier immediately
3. It should then wait 5 seconds and compute the password hash
4. The hashing algorithm should be SHA512

TC: A POST to /hash should accept a password
Given the /hash endpoint includes a password parameter {"password":"x"}, where x=password
When sending a POST request
Then a job identifier should return immediately

TC: A POST to /hash should not accept an empty password
Given the /hash endpoint includes a password parameter {"password":""}
When sending a POST request
Then the request should fail and return an error

TC: A POST to /hash should not accept a non-password parameter
Given the /hash endpoint includes a non-password parameter, for example {"id":"x"}, where x=id
When sending a POST request
Then the request should fail and return an error

TC: A POST to /hash should not accept an empty parameter
Given the /hash endpoint includes an empty parameter
When sending a POST request
Then the request should fail and return an error

GET to /hash endpoint
Precondition: The application has launched successfully and POST to /hash endpoint requests sent to hash passwords
Requirements:
1. A GET to /hash should accept a job identifier
2. It should return the base64 encoded password hash for the corresponding POST request

TC: A GET to /hash should accept a job identifier (corresponding POST request sent)
Given the /hash endpoint includes a valid job identifier
When sending a GET request
Then the base64 encoded password hash should be returned

TC: A GET to /hash should not accept an invalid job identifier (valid value, but no corresponding POST request)
Given the /hash endpoint includes an invalid job identifier
When sending a GET request
Then the request should fail and return an error

TC: A GET to /hash should not accept an invalid job identifier (invalid value)
Given the /hash endpoint includes an invalid job identifier
When sending a GET request
Then the request should fail and return an error

TC: A GET to /hash should not accept an empty job identifier
Given the /hash endpoint includes an empty job identifier
When sending a GET request
Then the request should fail and return an error

TC: A GET to /hash should should return the base64 encoded password hash for the corresponding POST request (corresponding POST request sent)
Given the /hash endpoint includes a valid job identifier
When sending a GET request
Then the base64 encoded password hash should be accurately returned

GET to /stats
Requirements:
1. It should accept no data
2. It should return a JSON data structure for the total hash requests since the server started and the average time of a hash request in milliseconds

TC: A GET to /stats should return a JSON data structure for the total hash requests since the server started and the average time of a hash request in milliseconds
Given the /stats endpoint does not include any additional data/parameters
When sending a GET request
Then the request should return a JSON data structure for the total hash requests since the server started and the average time of a hash request in milliseconds

TC: A GET to /stats should return a JSON data structure for the total hash requests since the server started and the average time of a hash request in milliseconds
Given the /stats endpoint does not include any additional data/parameters
When sending a GET request
Then the request should return a JSON data structure for the total hash requests since the server started and the average time of a hash request in milliseconds accurately

TC: A GET to /stats should accept no data/parameters
Given the /stats endpoint includes additional data/parameters, for example -d '{"password":"x"}', where x=password
When sending a GET request
Then the request should fail and return an error


<Password Hashing Application Additional Specifications>
Requirements:
1. The software should be able to process multiple connections simultaneously.
2. The software should support a graceful shutdown request - it should allow any in-flight password hashing to complete, reject any new requests, respond with a 200 and shutdown
Precondition: The application has launched successfully
Operating system: MacOS

TC: The software should be able to process multiple connections simultaneously for POST to /hash requests
Given the application has launched successfully
When multiple valid POST to /hash requests are sent concurrently
Then a job identifier should return immediately for each request concurrently

TC: The software should be able to process multiple connections simultaneously for GET to /hash requests
Given the application has launched successfully
When multiple valid GET to /hash requests are sent concurrently
Then the base64 encoded password hash should be returned for each request concurrently

TC: The software should be able to process multiple connections simultaneously for GET to /stats requests
Given the application has launched successfully
When multiple valid GET to /stats requests are sent concurrently
Then a JSON data structure for the total hash requests since the server started and the average time of a hash request in milliseconds should be returned for each request concurrently

TC: The software should support a graceful shutdown request for in-flight password hashing requests
Given a POST shutdown request is in progress for an active session
When there are in-flight password hashing requests in progress
Then the in-flight password hashing requests in progress should complete before shutting down and respond with a 200

TC: The software should support a shutdown request successfully
Given a POST shutdown request is in progress for an active session
When the shutdown request responds with a 200
Then the software should no longer wait or accept http connections

TC: No additional password requests should be allowed when shutdown is pending
Given a POST shutdown request is in progress for an active session
When POST to /hash endpoint requests are sent and not in-flight
Then the password requests should be rejected before shutting down and respond with a 200



#Notes:
-For MacOS: Install Homebrew if having issues unpacking/launching the application

#Considerations:
-Stress/performance testing the endpoints for degradation
-Exploratory testing for passwords including special characters and password length limits
