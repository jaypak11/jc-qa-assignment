<Defects discovered in Password Hashing Application under test>

Defect #1
Description: Hashing algorithm in application does not return the base64 encoded password correctly
Severity: Critical
Analysis: After encoding the string password via SHA512 for "angrymonkey" string, then encoding the hash to Base64 in the example given using online encoding tools, the expected hash values did not match up. This was also vetted against other password strings and results compared against the software hashing mechanism and online encoding tools. 
Actual: zHkbvZDdwYYiDnwtDdv/FIWvcy1sKCb7qi7Nu8Q8Cd/MqjQeyCI0pWKDGp74A1g==
Expected: MzRkZDBmMDBhYjYyNzlhY2EyNGQ4ZjNmNDFkZTc3MDFlMzMzMWU0NmVmNjQzNzcwNjE4ODgzOWYwYjQzNzZmZmM1MjE2YmRjY2I1YjBhMDliZWVhOGJiMzZlZjEwZjAyNzdmMzJhOGQwN2IyMDg4ZDI5NThhMGM2YTdiZTAwZDY=

Defect #2
Description: POST to /hash endpoint allows other parameters other than password
Severity: Medium
Analysis: Sending a POST request for the /hash endpoint and replacing the "password" paramater with any string is accepted
Actual: POST to /hash endpoint allows a non-password parameter
Expected: POST to /hash endpoint should only allow a password parameter

Defect #3
Description: POST /hash endpoint allows an empty password value
Severity: Medium
Analysis: Sending a POST request for the /hash endpoint with an empty value for the password parameter is accepted and returns a job identifier
Actual: POST to /hash endpoint allows an empty password value and returns a job identifier
Expected: POST to /hash endpoint should require a password value.  If it is empty the request should fail and return an error

Defect #4
Description: GET to /stats endpoints metric for average time of a hash request in milliseconds value is not returning accurate data
Severity: High
Analysis: Sent one valid POST request for the /hash endpoint, then sent a GET to /stats endpoint and returned an "AverageTime":1954218 milliseconds which converted to seconds, then minutes is ~32.57 minutes
Actual: GET to /stats endpoints metric for average time of a hash request in milliseconds value returned an "AverageTime":1954218 for one successful POST /hash request which is ~1954.218 seconds
Expected: GET to /stats endpoints metric for average time of a hash request in milliseconds value should return accurate data

Defect #5
Description: A GET to /stats accepts data/parameters
Severity: Medium/Low
Analysis: A GET to /stats with a password parameter is successful and returns the JSON data structure for the total hash requests since the server started and the average time of a hash request in milliseconds
Actual: A GET to /stats with a password parameter is successful and returns the JSON data structure for the total hash requests since the server started and the average time of a hash request in milliseconds
Expected: A GET to /stats request with data/parameters should fail and return an error

Defect #6
Description: The Hashing Application software does not process multiple connections simultaneously
Severity: Critical/High
Analysis: Sent multiple valid GET to /hash requests by using "&&" between each request in order to send multiple POST /hash requests concurrently.  What was observed was that each request was completing one at a time as if there was a queue.
Actual: Multiple valid GET to /hash requests that are sent concurrently appear to process one at a time
Expected: Multiple valid GET to /hash requests that are sent concurrently should process concurrently

Defect #7
Description: A POST to /hash should not accept an empty parameter
Severity: High
Analysis: Sent a POST to /hash allows an empty parameter, for example -d '{}' and returns a job identifier
Actual: POST to /hash endpoint allows an empty parameter value and returns a job identifier
Expected: POST to /hash request with an empty parameter should fail and return an error
