Test cases for Password Hashing Application


<Password Hashing Application Execution>
Precondition: User has downloaded the Password Hashing application and unpacked successfully
Operating system: MacOS

TC: Setting a valid PORT(8088) variable for application initialization
Given the Hashing Application is being initialized and a PORT environment variable defined
When the port is set to 8088
Then the application should launch and wait for http connections

TC: Setting an invalid PORT variable for application initialization
Given the Hashing Application is being initialized and a PORT environment variable defined
When the port is set to 7077
Then the application should fail to launch


<Password Hashing Application Specifications>
Precondition: The application has launched successfuly
Operating system: MacOS

POST to /hash endpoint
Requirements:
1. A POST to /hash should accept a password
2. It should return a job identifier immediately
3. It should then wait 5 seconds and compute the password hash
4. The hashing algorithm should be SHA512

TC: A POST to /hash should accept a password
Given the /hash endpoint includes a password parameter {"password":"x"}, where x=password
When sending a POST request
Then a job identifier should return immediately

TC: A POST to /hash should not accept an empty password
Given the /hash endpoint includes a password parameter {"password":""}
When sending a POST request
Then the request should fail and return an error

TC: A POST to /hash should not accept a non-password parameter
Given the /hash endpoint includes a non-password parameter, for example {"id":"x"}, where x=id
When sending a POST request
Then the request should fail and return an error

TC: A POST to /hash should not accept an empty parameter
Given the /hash endpoint includes an empty parameter
When sending a POST request
Then the request should fail and return an error

GET to /hash endpoint
Requirements:
1. A GET to /hash should accept a job identifier
2. It should return the base64 encoded password hash for the corresponding POST request

TC: A GET to /hash should accept a job identifier (corresponding POST request sent)
Given the /hash endpoint includes a valid job identifier
When sending a GET request
Then the base64 encoded password hash should be returned

TC: A GET to /hash should not accept an invalid job identifier (valid value/syntax, but no corresponding POST request)
Given the /hash endpoint includes an invalid job identifier
When sending a GET request
Then the request should fail and return an error

TC: A GET to /hash should not accept an invalid job identifier (invalid value/syntax)
Given the /hash endpoint includes an invalid job identifier
When sending a GET request
Then the request should fail and return an error

TC: A GET to /hash should not accept an empty job identifier
Given the /hash endpoint includes an invalid job identifier
When sending a GET request
Then the request should fail and return an error

TC: A GET to /hash should should return the base64 encoded password hash for the corresponding POST request
Given the /hash endpoint includes a valid job identifier
When sending a GET request
Then the base64 encoded password hash should be accurately returned

GET to /stats
1. It should accept no data
2. It should return a JSON data structure for the total hash requests since the server started and the average time of a hash request in milliseconds







#Notes:
-For MacOS: Install Homebrew if having issues unpacking/launching the application

#Considerations:
-Stress/performance testing the endpoints
-Exploratory testing for valid passwords including special characters and password length limits
